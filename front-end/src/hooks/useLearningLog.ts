import useLocalStorageState from "use-local-storage-state"
import { oldpathToGenerator } from "@settings/questionsSelection"

/** Old format for log entries */
type LogEntryV0 = {
  question: string // example: "asymptotics/sum"
  variant: string // example: "pure"
  seed: string // example: "myseed"
  result: "pass" | "fail"
  timestamp: number // as returned by Date.now()
}

/** Old format for log entries */
type LogEntryV1 = {
  /**
   * The path is generated by serializeGeneratorCall(..) and is of the form
   * "asymptotics/sum/pure/myseed" (note that the language is not part of the
   * path here)
   */
  path: string

  /** Whether the question was answered correctly */
  result: "pass" | "fail"

  /** When the question was answered (as returned by Date.now()) */
  timestamp: number
}

/**
 * V2 format for log entries is the same as V1,
 * but the path is now supposed to use the unique ID of the generator,
 * so it is of the form "sum/pure/myseed" instead of "asymptotics/sum/pure/myseed".
 */
export type LogEntryV2 = LogEntryV1

/**
 * Upgrade a log entry from V0 to V1
 *
 * @param e Log entry in V0 format
 * @returns Log entry in V1 format
 */
function upgradeV0ToV1(e: LogEntryV0): LogEntryV1 {
  return {
    path: e.question + "/" + e.variant + "/" + e.seed,
    result: e.result,
    timestamp: e.timestamp,
  }
}

/**
 * Upgrade a log entry from V0 to V1
 *
 * @param e Log entry in V1 format
 * @returns Log entry in V2 format
 */
function upgradeV1ToV2(e: LogEntryV1): LogEntryV2 | undefined {
  const { path, result, timestamp } = e
  const [skill, question, ...rest] = path.split("/")
  const tmp = skill + "/" + question
  if (tmp in oldpathToGenerator) {
    const id = oldpathToGenerator[tmp as keyof typeof oldpathToGenerator].id
    return { path: [id, ...rest].join("/"), result, timestamp }
  }
}

/**
 * Sort log entries by descending timestamp
 *
 * @param a Log entry
 * @param b Log entry
 * @returns positive number if and only if a is more recent than b
 */
function byDescendingTimestamp(a: LogEntryV2, b: LogEntryV2) {
  return b.timestamp - a.timestamp
}

/**
 * This hook returns the full learning log of the user.
 * The log is stored in the local storage of the browser.
 * Each interaction with a question is logged in the learning log.
 */
export function useLearningLog() {
  const [logV0, setLogV0] = useLocalStorageState<Array<LogEntryV0>>("log", {
    defaultValue: [],
    storageSync: false,
  })
  const [logV1, setLogV1] = useLocalStorageState<Array<LogEntryV1>>("log-v1", {
    defaultValue: [],
    storageSync: false,
  })
  const [logV2, setLogV2] = useLocalStorageState<Array<LogEntryV2>>("log-v2", {
    defaultValue: [],
    storageSync: true,
  })

  if (logV0.length > 0) {
    console.log("The log in storage will now be upgraded from v0 to v1...")
    setLogV1(logV1.concat(logV0.map(upgradeV0ToV1)).sort(byDescendingTimestamp))
    setLogV0([])
  }

  if (logV1.length > 0) {
    console.log("The log in storage will now be upgraded from v1 to v2...")
    for (const x of logV1) {
      const y = upgradeV1ToV2(x)
      if (y !== undefined) logV2.push(y)
    }
    setLogV2(logV2.sort(byDescendingTimestamp))
    setLogV1([])
  }

  const log = logV2
  const setLog = setLogV2

  for (let i = 0; i < log.length - 1; i++) {
    console.assert(
      log[i].timestamp > log[i + 1].timestamp,
      "Invariant failed: Timestamps in the log must be strictly decreasing!",
    )
  }

  function appendLogEntry(e: LogEntryV2) {
    const newLog = log.slice()
    newLog.push(e)
    newLog.sort(byDescendingTimestamp)
    setLog(newLog)
  }

  function deleteLogEntry(timestamp: number) {
    setLog(log.filter((e) => e.timestamp !== timestamp))
  }

  function clearLog() {
    setLog([])
  }

  return { log, setLog, appendLogEntry, deleteLogEntry, clearLog }
}

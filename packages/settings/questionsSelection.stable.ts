/**
 * This file contains a list of all questions available on the give instance of SEAL.
 * TODO: In future this file should be generated by a script.
 */
import type { QuestionCollection } from "@shared/api/QuestionRouter"
import { Between } from "@shared/question-generators/asymptotics/between"
import { LandauNotation } from "@shared/question-generators/asymptotics/landau"
import { AsymptoticsPreciseLanguage } from "@shared/question-generators/asymptotics/preciseLanguage"
import { SortTerms } from "@shared/question-generators/asymptotics/sort"
import { SimplifySum } from "@shared/question-generators/asymptotics/sum"
import { DijkstraAlgorithm } from "@shared/question-generators/graph-algorithms/dijkstra"
import { DijkstraTableGenerator } from "@shared/question-generators/graph-algorithms/dijkstraTable"
import { TreeTraversal } from "@shared/question-generators/graph-algorithms/treeTraversal.ts"
import { HeapNeighbours } from "@shared/question-generators/heap/generatorNeighbours.ts"
import { HeapOperations } from "@shared/question-generators/heap/generatorOperations.ts"
import { HeapVerifying } from "@shared/question-generators/heap/generatorVerify.ts"
import { huffmanCoding } from "@shared/question-generators/huffman-coding/huffmanCoding"
import { ReverseHuffmanCoding } from "@shared/question-generators/huffman-coding/reverseHuffmanCoding.ts"
import { AxbGenerator } from "@shared/question-generators/math/linearAlgebra/axb/axbGen.ts"
import { Determinant } from "@shared/question-generators/math/linearAlgebra/determinant/det.ts"
import { CRT } from "@shared/question-generators/math/modularArithmetic/crt.ts"
import { ExtendedEuclideanAlgorithm } from "@shared/question-generators/math/modularArithmetic/eea.ts"
import { modFactor } from "@shared/question-generators/math/modularArithmetic/modFactorization.ts"
import { ModTricks } from "@shared/question-generators/math/modularArithmetic/modTricks.ts"
import { MinimizePropositionalLogic } from "@shared/question-generators/propositional-logic/minimize.ts"
import { NormalForms } from "@shared/question-generators/propositional-logic/normalForms"
import { ReadingSyntaxTrees } from "@shared/question-generators/propositional-logic/readingSyntaxTrees.ts"
import { Resolution } from "@shared/question-generators/propositional-logic/resolution.ts"
import { Satisfiability } from "@shared/question-generators/propositional-logic/satisfiability"
import { SemanticEquivalence } from "@shared/question-generators/propositional-logic/semanticEquivalence.ts"
import { TruthTableFillingGenerator } from "@shared/question-generators/propositional-logic/truthTableFillingGenerator.ts"
import { TruthTableReadingGenerator } from "@shared/question-generators/propositional-logic/truthTableReadingGenerator.ts"
import { queueQuestion } from "@shared/question-generators/Queue/QueueGenerator.ts"
import { RecursionFormula } from "@shared/question-generators/recursion/formula"
import { RecurrenceMaster } from "@shared/question-generators/recursion/recurrenceMaster"
import { stackQuestion } from "@shared/question-generators/Stack/StackGenerator.ts"
import { Loops } from "@shared/question-generators/time/loops"
import { QuickFindGenerator } from "@shared/question-generators/unionFind/quickFind/generatorQF.ts"

export const collection: QuestionCollection = [
  {
    slug: "propositional-logic",
    name: { de: "Aussagenlogik", en: "Propositional Logic" },
    topics: ["logic", "math"],
    contents: [
      Satisfiability,
      NormalForms,
      SemanticEquivalence,
      TruthTableReadingGenerator,
      TruthTableFillingGenerator,
      ReadingSyntaxTrees,
      Resolution,
      MinimizePropositionalLogic,
    ],
  },
  {
    slug: "modular-arithmetic",
    name: { de: "Modulare Arithmetik", en: "Modular Arithmetic" },
    topics: ["math"],
    contents: [ModTricks, CRT, modFactor, ExtendedEuclideanAlgorithm],
  },
  {
    slug: "asymptotics",
    name: { de: "Asymptotische Notation und Laufzeiten", en: "Asymptotic Notation and Runtimes" },
    topics: ["math", "recursion", "pseudocode"],
    contents: [
      AsymptoticsPreciseLanguage,
      LandauNotation,
      SortTerms,
      SimplifySum,
      Between,
      RecursionFormula,
      RecurrenceMaster,
      Loops,
    ],
  },
  {
    slug: "stack",
    name: { de: "Stacks und Queues", en: "Stacks and Queues" },
    topics: ["algorithms", "data-structures"],
    contents: [stackQuestion, queueQuestion],
  },
  {
    slug: "heap",
    name: { de: "Heaps", en: "Heaps" },
    topics: ["algorithms", "data-structures"],
    contents: [HeapOperations, HeapVerifying, HeapNeighbours],
  },
  {
    slug: "union-find",
    name: { de: "Union-Find", en: "Union-Find" },
    topics: ["algorithms", "data-structures"],
    contents: [QuickFindGenerator],
  },
  {
    slug: "huffmancoding",
    name: { de: "Huffman-Codierung", en: "Huffman-Coding" },
    contents: [huffmanCoding, ReverseHuffmanCoding],
    topics: ["algorithms"],
  },
  {
    slug: "graphs",
    name: { de: "Graphalgorithmen", en: "Graph Algorithms" },
    topics: ["algorithms", "data-structures", "graph"],
    contents: [TreeTraversal, DijkstraAlgorithm, DijkstraTableGenerator],
  },
  {
    slug: "linear-algebra",
    name: { de: "Lineare Algebra", en: "Linear Algebra" },
    topics: ["math"],
    contents: [Determinant, AxbGenerator],
  },
]

export const oldPathToGenerator = {
  "asymptotics/precise-language": AsymptoticsPreciseLanguage,
  "asymptotics/sort": SortTerms,
  "asymptotics/landau": LandauNotation,
  "asymptotics/sum": SimplifySum,
  "asymptotics/between": Between,
  "recursion/formula": RecursionFormula,
  "recursion/master": RecurrenceMaster,
  "time/loops": Loops,
  "huffmancoding/huffmanCoding": huffmanCoding,
}
